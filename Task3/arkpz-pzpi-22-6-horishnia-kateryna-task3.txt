Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії


ЗВІТ
до лабораторної роботи №3
з дисципліни «Аналіз та рефакторинг коду»



Виконала:
ст. гр. ПЗПІ-22-6,
Горішня Катерина Олексіївна



Перевірив:
ст. викладач каф. ПІ,
Сокорчук Ігор Петрович



Харків 2024


1 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

1.1 Мета роботи
Метою роботи є розробка бізнес-логіки та функцій адміністрування серверної частини програмної системи.

1.2 Хід роботи
1.2.1	Розробити бізнес логіку серверної частини програмної системи. 
1. Бізнес-логіка для автоматичного керування освітленням. Система вмикає освітлення при виявленні руху та вимикає його після відсутності руху протягом заданого часу, оптимізуючи енергоспоживання.
2. Бізнес-логіка для відправки сповіщень про активацію/деактивацію освітлення. Користувачі отримують сповіщення про зміни стану освітлення, що дозволяє контролювати його використання та споживану енергію.
3. Бізнес-логіка для моніторингу стану IoT сенсорів. Система моніторить стан сенсорів і повідомляє про несправності або відсутність даних, щоб уникнути збоїв у системі.
4. Бізнес-логіка для аналізу енергоспоживання та економії. Система генерує аналітику про енергоспоживання та надає рекомендації для зниження витрат енергії.
5. Бізнес-логіка для налаштування графіків роботи освітлення. Користувачі можуть налаштовувати графіки роботи освітлення, автоматизуючи його включення та вимикання.
6. Бізнес-логіка для створення персоналізованої аналітики для користувачів. Система формує звіти для користувачів про стан пристроїв та енергоспоживання з рекомендаціями для оптимізації.

1.2.2	 Розробити функції адміністрування серверної частини програмної системи. 
Адміністратор програмної системи має повний доступ до всіх аспектів роботи системи, включаючи управління IoT сенсорами, графіками роботи освітлення, налаштуваннями бази даних і бізнес-логікою. Адміністратор відповідає за налаштування та управління сенсорами, освітленням, а також за їх налаштування, параметри та місце розташування. Він також здійснює технічне обслуговування бази даних, оптимізує структуру та запити, створює резервні копії даних і контролює доступ до бази для інших користувачів. Крім того, адміністратор налаштовує алгоритми для енергоспоживання та визначає допустимі значення для сенсорних даних, а також управляє параметрами аналітики для користувачів. Він має повний контроль над системою, включаючи зміну прав доступу інших адміністраторів, видалення користувачів та налаштування загальних параметрів системи, таких як політики безпеки і інтеграція з іншими платформами.
Користувач системи взаємодіє з системою для керування своїми пристроями та освітленням. Він може додавати нові пристрої, переглядати аналітику про стан пристроїв, а також отримувати сповіщення про зміни в системі та оновлювати свою особисту інформацію.

1.2.3	Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини. 
Бізнес-логіка включає кілька важливих аспектів. Наприклад, для керування станом освітлення на основі даних від сенсорів, система використовує алгоритм для збереження енергії. Коли сенсор повідомляє про активацію освітлення, система зберігає дані про час та тривалість активації для подальшого аналізу енергоспоживання:
1. Якщо освітлення увімкнене, додається запис у таблицю DeviceReport.
 1   report = DeviceReport(device=device, time=datetime.now(UTC), enabled=payload["enabled"], enabled_for=payload["enabled_for"])
 2   session.add(report)
 3   session.commit()
2. Для автоматичного керування графіками роботи освітлення, система забезпечує налаштування розкладів для кожного пристрою. Користувач може додавати та редагувати ці розклади через API.
 1   schedule = DeviceSchedule(device=device, start_hour=body.start_hour, end_hour=body.end_hour)
 2   session.add(schedule)
 3   session.commit()
Кожна роль користувача має відповідні функції, наприклад, Admin має повний доступ до керування користувачами та пристроями, тоді як RegularUser має доступ тільки до налаштувань пристроїв та їх графіків роботи. Функції адміністрування виконуються через чітко визначені маршрути API, що дозволяє здійснювати повний контроль над усіма аспектами системи.
Програмну реалізацію бізнес-логіки тестувано через Swagger для перевірки коректності роботи API, що підтвердило правильність роботи всіх функцій та готовність до інтеграції з клієнтськими додатками.

1.2.4	Перевірити роботу серверної частини системи.
Перевіримо роботу створеної системи. 
На рисунку 1 показано тестування запиту для отримання списку користувачів через API. Це запит, який адміністратор використовує для отримання інформації про користувачів у системі. Запит передає правильний токен автентифікації в заголовку, і відповідь від сервера містить список користувачів з їхніми даними, такими як ідентифікатор, електронна пошта, ім’я та статус адміністратора.

Рисунок 1 – Запит на отримання користувачів адміністратором

На рисунку 2 показано тестування запиту для отримання списку пристроїв адміністратора. Цей запит адміністратор використовує для отримання інформації про всі пристрої, керовані системою. Запит також передає токен автентифікації в заголовку. Відповідь від сервера містить список пристроїв з їхніми даними, такими як ідентифікатор, ім’я пристрою та параметри налаштувань, що дозволяє адміністратору керувати пристроями в системі.

Рисунок 2 – Запит на отримання пристроїв адміністратором

1.3 Висновки
У процесі виконання лабораторної роботи була розроблена бізнес-логіка та функції адміністрування серверної частини програмної системи для інтелектуального освітлення з використанням IoT сенсорів. Система реалізує автоматичне керування освітленням, оптимізацію енергоспоживання та моніторинг стану пристроїв через API. Кожна роль користувача має чітко визначені функції: адміністратор керує сенсорами, графіками роботи освітлення, базою даних і бізнес-логікою, тоді як користувач взаємодіє тільки з власними пристроями. Програмну реалізацію перевірено через Swagger, що дозволяє зручно тестувати всі API-методи, підтвердивши їх коректну роботу та готовність до інтеграції з клієнтськими додатками

1.4 Список використаних джерел 
1. PostgreSQL – офіційна документація. URL: https://www.postgresql. org/docs/ (дата звернення: 19.12.2024).
2. Swagger – офіційний сайт. URL: https://swagger.io/ (дата звернення: 19.12.2024).
3. Python – офіційний сайт. URL: https://www.python.org/ (дата звернення: 19.12.2024).
4. Flask – офіційна документація. URL: https://flask.palletsprojects.com/ (дата звернення: 19.12.2024).
5. SQLAlchemy – офіційна документація. URL: https://www.sqlalchemy.org/ (дата звернення: 19.12.2024).

1.5 Посилання
Посилання на GitHub репозиторій: 
https://github.com/NureHorishniaKateryna/arkpz-pzpi-22-6-horishnia-kateryna/tree/main/Task3
Посилання на відео доповіді: https://youtu.be/iPhMEONVOIU
