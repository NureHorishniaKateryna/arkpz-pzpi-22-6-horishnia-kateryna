Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи №5
з дисципліни «Аналіз та рефакторинг коду»


Виконала:
ст. гр. ПЗПІ-22-6,
Горішня Катерина Олексіївна


Перевірив:
ст. викладач каф. ПІ,
Сокорчук Ігор Петрович




Харків 2024

1 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ

1.1 Мета роботи
Метою роботи є розгортання програмної системи та демонстрація її роботи.

1.2 Хід роботи
1.2.1 Розгорнути реалізовану програмну систему
Програмна система складається з двох основних компонентів: сервера та IoT клієнта. Сервер розроблений на Python з використанням Flask для створення веб-додатків, Flask-MQTT для інтеграції з MQTT, та SQLAlchemy для управління базою даних. Він обробляє запити через REST API, забезпечує реєстрацію, авторизацію користувачів, управління пристроями та їх конфігурацією, а також збір звітів та аналітики. MQTT використовується для передачі даних в реальному часі.
IoT клієнт написаний на C++ з бібліотеками paho.mqtt.cpp для роботи з MQTT та nlohmann/json для обробки JSON. Клієнт здійснює HTTP запити до сервера для отримання даних та підключається до MQTT для обміну повідомленнями про зміни стану пристроїв.
Разом сервер і клієнт утворюють систему для управління IoT пристроями, збору даних, зміни їх стану та отримання аналітики.

1.2.2 Перевірити та налаштувати роботу розгорнутої програмної системи.
Для перевірки та налаштування роботи розгорнутої програмної системи було виконано кілька основних кроків. 
На рисунку 1 ми бачимо процес клонування репозиторію з GitHub за допомогою команди git clone. Ця команда завантажує весь вміст репозиторію на локальну машину, що дозволяє працювати з проектом без необхідності вручну переносити файли. Репозиторій містить усі необхідні файли та конфігурації для подальшого налаштування та запуску програми.

Рисунок 1 – Процес клонування репозиторію з GitHub за допомогою команди git clone

Рисунок 2 показує вміст файлу .env, який містить конфігураційні змінні для підключення до різних сервісів. Цей файл необхідний для того, щоб налаштувати параметри, як-то доступ до бази даних, MQTT брокера та інші критичні дані, що використовуються під час виконання програми. Вказані змінні, як наприклад пароль і ім’я користувача для підключення до бази даних, зберігаються в цьому файлі для забезпечення безпеки та зручності налаштувань.
 
Рисунок 2 – Вміст файлу .env, що містить конфігураційні змінні для підключення до сервісів

Рисунок 3 демонструє процес побудови Docker образу. Використовується команда docker build, яка завантажує всі необхідні бібліотеки та залежності, визначені в Dockerfile, і створює Docker контейнер для подальшого використання. Це дозволяє автоматизувати налаштування середовища, зробити його портативним і швидко запускати програму на різних машинах без необхідності вручну налаштовувати залежності.

Рисунок 3 –  Процес побудови Docker образу з необхідними бібліотеками та конфігураціями

Рисунок 4 показує підключення бази даних та запуск програми через Docker Compose. Docker Compose використовується для автоматизації запуску всіх необхідних контейнерів, зокрема для бази даних та самого серверу програми. Це спрощує процес налаштування і дозволяє запускати програму в ізольованому середовищі з усіма залежностями.

Рисунок 4 – Підключення бази даних і запуск програми через Docker Compose

1.2.3 Створення резервних копій та відновлення даних
Для створення резервної копії бази даних у PostgreSQL використовується утиліта pg_dump, де: U username – ім’я користувача для підключення до бази даних, F c –  формат бекапу (custom), f "backup_file.dump" –  шлях до файлу, де буде збережено бекап, database_name –  назва бази даних, яку потрібно зберегти.
1  pg_dump -U username -F c -b -v -f "backup_file.dump" database_name
Для відновлення бекапу використовується утиліта pg_restore, що дозволяє відновити дані з резервної копії в задану базу даних, де 
d database_name – база даних, в яку буде відновлено бекап.
1  pg_restore -U username -d database_name -v "backup_file.dump"
Якщо необхідно створити бекап всіх баз даних на сервері, використовується команда pg_dumpall, яка дозволяє зберегти резервну копію всіх даних у форматі SQL.
1  pg_dumpall -U username -f "all_databases_backup.sql"
Для автоматизації процесу створення бекапів можна використовувати планувальник завдань cron, що дає змогу налаштувати регулярне створення бекапів, наприклад, для щоденного бекапу в певний час. Це дозволяє забезпечити надійне зберігання даних і їх відновлення у разі необхідності.
1  0 2 * * * pg_dump -U username -F c -b -v -f "/path/to/backup_$(date +\%F).dump" database_name

1.2.4 Продемонструвати функціональність програмної системи. 
Для демонстрації функціональності програмної системи було виконано ряд запитів через API, які дозволяють взаємодіяти з різними частинами системи, такими як реєстрація користувача, управління пристроями, налаштування розкладів та управління користувачами.

1.3 Висновки
У ході виконання роботи була успішно розгорнута програмна система, що складається з сервера та IoT клієнта, забезпечуючи повноцінну взаємодію між ними через REST API та MQTT. Були налаштовані всі необхідні компоненти для роботи системи, включаючи підключення до бази даних, налаштування конфігурацій, а також автоматизація процесу запуску через Docker та Docker Compose. Тестування системи продемонструвало коректну роботу запитів для реєстрації користувачів, управління пристроями, редагування розкладів і керування користувачами. 
Таким чином, програмна система була розгорнута та налаштована, що дозволяє ефективно управляти IoT пристроями, отримувати дані та аналітику, а також забезпечує гнучке керування користувачами і їх правами доступу.

1.4 Список використаних джерел 
1. Swagger – офіційний сайт. URL: https://swagger.io/ (дата звернення: 25.12.2024).
2. PostgreSQL – офіційна документація. URL: https://www.postgresql. org/docs/ (дата звернення: 25.12.2024).
3. MQTT Protocol – офіційна документація. URL: https://mqtt.org (дата звернення: 25.12.2024).
4. Docker – офіційний сайт. URL: https://www.docker.com/ (дата звернення: 25.12.2024).

1.5 Посилання
Посилання на GitHub репозиторій: 
https://github.com/NureHorishniaKateryna/arkpz-pzpi-22-6-horishnia-kateryna/tree/main/Task5
Посилання на відео доповіді: https://youtu.be/JVvFRDPmjVo
