Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»



Виконала:
ст. гр. ПЗПІ-22-6, 
Горішня Катерина Олексіївна

Перевірив:
ст. викладач каф. ПІ,
Сокорчук Ігор Петрович




Харків 2024

1 ПРАВИЛА ОФОРМЛЕННЯ ПРОГРАМНОГО КОДУ

1.1 Мета роботи: 
   Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мови програмування Scala, а також навчитися аналізувати та проводити рефакторинг коду для покращення його якості.
     
1.2 Хід роботи:
1.2.1 Обрати мову програмування.
     Для аналізу було обрано мову програмування Scala.
     	
1.2.2 Написати приклади коду для демонстрації правил написання чистого, ефективного та підтримуваного коду на Scala.
Основні рекомендації написання коду на мові програмування Scala
     1. Рекомендація: Використовуйте осмислені назви змінних, функцій та класів, які чітко відображають їх призначення. Уникайте скорочень, абревіатур і неочевидних назв. 
Опис: Назви змінних, функцій і класів повинні бути зрозумілими й осмисленими. Це полегшує подальше використання та підтримку коду, особливо у командній роботі. Скорочення та неочевидні назви ускладнюють розуміння логіки програми.

Приклад:  
 1   // Поганий приклад
 2   val n = 100
 3   def calc(a: Int, b: Int): Int = a + b
 4   
 5   // Гарний приклад
 6   val maxConnections = 100
 7   def calculateSum(firstNumber: Int, secondNumber: Int): Int = firstNumber + secondNumber

     2. Рекомендація: Використовуйте коментарі для пояснення складної логіки або важливих рішень у коді. Уникайте очевидних або зайвих коментарів.
Опис: Коментарі повинні пояснювати логіку, що не є очевидною. Уникайте коментарів, які повторюють те, що й так зрозуміло з коду. Замість цього описуйте складні рішення, особливості алгоритмів або нестандартні рішення.

Приклад:  
 1   // Поганий приклад
 2   val discount = 0.2 // Знижка дорівнює 0.2
 3   
 4   // Гарний приклад
 5   val discountRate = 0.2 // Знижка для користувачів зі статусом "Premium"

     3. Рекомендація: Використовуйте стандартний стиль відступів та додавайте порожні рядки для розділення логічних блоків.
Опис: Відступи допомагають читати вкладену структуру коду, а порожні рядки розділяють логічні частини програми. Відсутність цих елементів ускладнює розуміння коду, а надлишок порожніх рядків виглядає неакуратно.

Приклад:  
 1   // Поганий приклад
 2   def add(a:Int,b:Int):Int={a+b}println(add(5,10))
 3   
 4   // Гарний приклад
 5   def add(a: Int, b: Int): Int = {
 6     a + b
 7   }
 8   
 9   println(add(5, 10))

     4. Рекомендація: Створюйте функції, які виконують лише одну конкретну задачу, та уникайте великої кількості рядків у їх реалізації.
Опис: Функція має мати єдину відповідальність, тобто виконувати лише одну логічну дію. Це підвищує її зрозумілість, спрощує тестування та повторне використання. Розділяйте довгі функції на менші, зрозумілі частини.

Приклад:  
 1   // Поганий приклад
 2   def processOrder(order: Order): Unit = {
 3     println(s"Order ID: ${order.id}")
 4     println(s"Total Price: ${order.totalPrice}")
 5     println("Sending email notification...")
 6     sendEmail(order.customerEmail, "Order Processed")
 7   }
 8   
 9   // Гарний приклад
10   def processOrder(order: Order): Unit = {
11     logOrderDetails(order)
12     sendOrderNotification(order)
13   }
14   
15   def logOrderDetails(order: Order): Unit = {
16     println(s"Order ID: ${order.id}")
17     println(s"Total Price: ${order.totalPrice}")
18   }
19   
20   def sendOrderNotification(order: Order): Unit = {
21     val message = createEmailMessage(order)
22     sendEmail(order.customerEmail, message)
23   }

     5. Рекомендація: Назва функції повинна чітко відповідати дії, яку вона виконує, або значенню, яке повертає.
Опис: Імена функцій повинні бути дієсловами, що описують дію, або іменниками для значень, які вони повертають. Уникайте абстрактних чи узагальнених назв.

Приклад:
 1   // Поганий приклад
 2   def doWork(a: Int, b: Int): Int = a * b
 3   
 4   // Гарний приклад
 5   def calculateProduct(multiplier: Int, multiplicand: Int): Int = multiplier * multiplicand

     6. Рекомендація: Використовуйте однакові шаблони оформлення для схожих функцій, щоб забезпечити узгодженість у коді.
Опис:  Схожі функції повинні мати однакову структуру. Це покращує читабельність коду та полегшує його підтримку.

Приклад:
 1   // Поганий приклад
 2   def getUser(id: Int): User = fetchUserFromDB(id)
 3  def saveOrder(order: Order): Boolean = println("Order saved")
 4   
 5   // Гарний приклад
 6   def getUser(id: Int): Option[User] = fetchUserFromDB(id)
 7   def saveOrder(order: Order): Unit = saveOrderToDB(order)

     7. Рекомендація: Використовуйте один стиль відступів у всьому проєкті (2 пробіли для Scala). Уникайте змішування пробілів і табуляцій.
Опис:  Послідовність відступів забезпечує єдину структуру коду, полегшуючи його розуміння. 

Приклад:  
 1   // Поганий приклад
 2   def multiply(a:Int,b:Int):Int={
 3      a+b
 4   }
 5   
 6   // Гарний приклад
 7   def multiply(a: Int, b: Int): Int = {
 8     a + b
 9   }

     8. Рекомендація: Завжди використовуйте фігурні дужки навіть для однорядкових блоків, щоб уникати помилок.
Опис: Використання фігурних дужок навіть для однорядкових блоків унеможливлює помилки під час додавання нового коду.

Приклад:  
 1   // Поганий приклад
 2   def checkAmount(amount: Int): String =  
 3     if (amount > 100) return "High value"  
 4     else return "Low value"
 5   
 6   // Гарний приклад
 7   def checkAmount(amount: Int): String = {
 8     if (amount > 100) {
 9       return "High value"
10     } else {
11       return "Low value"
12     }
13   }

     9. Рекомендація: Використовуйте логічне вирівнювання операторів для підвищення читабельності довгих виразів.
Опис: Довгі логічні або математичні вирази слід розбивати на кілька рядків для кращої читабельності.

Приклад:  
 1   // Поганий приклад
 2   val isEligible = age > 18 && income > 30000 && creditScore > 700
 3   
 4   // Гарний приклад
 5   val isEligible = age > 18 &&
 6                    income > 30000 &&
 7                    creditScore > 700

1.2.3. Створити презентацію, в якій розглянуті рекомендації для написання чистого та якісного коду на Scala. 
     Слайди презентації наведено у додатку А. 
     
1.3 Висновки
     Для підвищення якості коду в мові програмування Scala необхідно використовувати зрозумілі й осмислені імена для змінних, функцій і класів, що сприяє швидкому розумінню й легкій підтримці коду. Коментарі мають пояснювати складну логіку або нестандартні рішення, а не дублювати очевидний функціонал. Структурований код з однорідними відступами, логічним поділом блоків і порожніми рядками значно покращує його читабельність.
     Функції слід робити короткими, з єдиною відповідальністю, що спрощує їх тестування й модифікацію. Дотримання єдиного стилю форматування, зокрема обов’язкових фігурних дужок та логічного вирівнювання довгих виразів, забезпечує послідовність і зрозумілість. Виконання цих рекомендацій мінімізує ризик помилок, полегшує підтримку коду та підвищує його загальну якість.
     
1.4 Список використаних джерел
1. Офіційна документація Scala : [вебсайт]. – Режим доступу: https://docs.scala-lang.org/ (дата звернення: 10.12.2024).
2. Мартін Р. Чистий код: створення, аналіз та рефакторинг / Р. Мартін. – Харків : Пітер, 2019. – 464 с.
3. Scala Style Guide : [вебсайт]. – Режим доступу: https://docs.scala-lang.org/style/ (дата звернення: 10.12.2024).

1.5 Посилання
Посилання на GitHub репозиторій: 
https://github.com/NureHorishniaKateryna/arkpz-pzpi-22-6-horishnia-kateryna/ tree/main/Pract1
Посилання на відео доповіді: https://youtu.be/

Додаток А
Слайди презентації

Рисунок А.1 – Титульний слайд

Рисунок А.2 – Зміст презентації

Рисунок А.3 – Вступ

Рисунок А.4 – Особливості обраної мови програмування

Рисунок А.5 – Рекомендація щодо назв змінних, функцій та класів

Рисунок А.6 – Рекомендація щодо написання коментарів

Рисунок А.7 – Рекомендація щодо відступів

Рисунок А.8 – Рекомендація щодо створення функцій

Рисунок А.9 – Рекомендація щодо назви функцій

Рисунок А.10 – Рекомендація щодо шаблонів оформлення функцій

Рисунок А.11 – Рекомендація щодо відступів, пробілів та табуляцій

Рисунок А.12 – Рекомендація щодо використання фігурних дужок

Рисунок А.13 – Рекомендація щодо логічного вирівнювання операторів

Рисунок А.14 – Приклад коду до та після застосування всіх рекомендацій

Рисунок А.15 – Висновки

Рисунок А.16 – Список використаних джерел

Рисунок А.17 – Завершальний слайд
     
