Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії




ЗВІТ
до практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»














Харків 2024

1 МЕТОДИ РЕФАКТОРИНГУ КОДУ

1.1 Мета роботи: 
     Навчитися основним методам рефакторингу коду на основі реальних прикладів із власних програмних проєктів. Освоїти навички ідентифікації проблем у коді та використання відповідних методів рефакторингу для покращення його якості, читабельності та ефективності.
     
1.2 Хід роботи:
1.2.1 Обрати методи рефакторингу коду.
     Було обрано такі методи рефакторингу, як Add Parameter (додавання параметру), Remove Parameter (видалення параметру) та Hide Delegate (приховування делегату).
     
1.2.2. Зробити опис кожного з методів рефакторингу. 
     Метод 1: Add Parameter (додавання параметру) застосовується тоді, коли потрібно розширити функціональність методу або забезпечити гнучкість його використання шляхом додавання нового параметра. Це дозволяє враховувати додаткові умови або впливати на поведінку методу без створення його нових версій. Мотивація цього методу полягає в необхідності адаптувати існуючий метод до нових вимог без дублювання коду. Додавання параметру робить метод більш універсальним і дозволяє контролювати його роботу на основі конкретного значення. 
     Порядок рефакторингу передбачає оновлення сигнатури методу, додавання нового параметра, внесення змін у логіку методу для його використання та перевірку всіх місць, де метод викликається. Це забезпечує гнучкість та зменшує необхідність створення окремих методів для схожих завдань, одночасно покращуючи підтримку коду.
     Метод 2: Remove Parameter (видалення параметру) використовується, коли параметр у методі більше не потрібен або його значення може бути отримано іншим шляхом, наприклад, через глобальну змінну чи інтерфейс класу. Основна мотивація методу полягає в спрощенні методу та підвищенні його читабельності, оскільки зайві параметри ускладнюють роботу з кодом і збільшують ризик помилок. Видалення непотрібних параметрів дозволяє зменшити складність інтерфейсу методу та полегшує його використання іншими розробниками. 
     Порядок рефакторингу передбачає перевірку значення параметра, заміну його використання локальним або глобальним контекстом, видалення параметра зі сигнатури методу та оновлення всіх викликів методу у програмному коді. У результаті метод стає простішим, зрозумілішим та ефективнішим.
     Метод 3: Hide Delegate (приховування делегату) застосовується тоді, коли потрібно зменшити залежність клієнтського коду від делегатів, які використовуються в класі. Делегати часто додають додаткові кроки для взаємодії, що робить код менш зрозумілим і складним для підтримки. Мотивація методу полягає у спрощенні доступу до делегатів через створення додаткових методів у класі, які приховують логіку виклику делегата. Це дозволяє клієнтському коду викликати необхідний функціонал напряму, не залежачи від внутрішньої структури класу. 
     Порядок рефакторингу передбачає створення нового методу у класі, який буде викликати делегат, заміну прямих викликів делегата на виклики нового методу та проведення перевірки коректності роботи коду. У результаті знижується кількість кроків для взаємодії з делегатом, що робить код більш зрозумілим, інтуїтивно простим і зручним для використання.
     
1.2.3. Використати описані методи рефакторингу для коду власних програмних проєктів.
