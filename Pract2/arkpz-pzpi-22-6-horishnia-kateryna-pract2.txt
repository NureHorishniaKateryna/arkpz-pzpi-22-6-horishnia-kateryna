Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»


Виконала:
ст. гр. ПЗПІ-22-6,
Горішня Катерина Олексіївна


Перевірив:
ст. викладач каф. ПІ,
Сокорчук Ігор Петрович




Харків 2024

1 МЕТОДИ РЕФАКТОРИНГУ КОДУ

1.1 Мета роботи: 
     Навчитися основним методам рефакторингу коду на основі реальних прикладів із власних програмних проєктів. Освоїти навички ідентифікації проблем у коді та використання відповідних методів рефакторингу для покращення його якості, читабельності та ефективності.
     
1.2 Хід роботи:
1.2.1 Обрати методи рефакторингу коду.
     Було обрано такі методи рефакторингу, як Add Parameter (додавання параметру), Remove Parameter (видалення параметру) та Hide Delegate (приховування делегату).
     
1.2.2. Зробити опис кожного з методів рефакторингу. 
     Метод 1: Add Parameter (додавання параметру) застосовується тоді, коли потрібно розширити функціональність методу або забезпечити гнучкість його використання шляхом додавання нового параметра. Це дозволяє враховувати додаткові умови або впливати на поведінку методу без створення його нових версій. Мотивація цього методу полягає в необхідності адаптувати існуючий метод до нових вимог без дублювання коду. Додавання параметру робить метод більш універсальним і дозволяє контролювати його роботу на основі конкретного значення. 
     Порядок рефакторингу передбачає оновлення сигнатури методу, додавання нового параметра, внесення змін у логіку методу для його використання та перевірку всіх місць, де метод викликається. Це забезпечує гнучкість та зменшує необхідність створення окремих методів для схожих завдань, одночасно покращуючи підтримку коду.
     Метод 2: Remove Parameter (видалення параметру) використовується, коли параметр у методі більше не потрібен або його значення може бути отримано іншим шляхом, наприклад, через глобальну змінну чи інтерфейс класу. Основна мотивація методу полягає в спрощенні методу та підвищенні його читабельності, оскільки зайві параметри ускладнюють роботу з кодом і збільшують ризик помилок. Видалення непотрібних параметрів дозволяє зменшити складність інтерфейсу методу та полегшує його використання іншими розробниками. 
     Порядок рефакторингу передбачає перевірку значення параметра, заміну його використання локальним або глобальним контекстом, видалення параметра зі сигнатури методу та оновлення всіх викликів методу у програмному коді. У результаті метод стає простішим, зрозумілішим та ефективнішим.
     Метод 3: Hide Delegate (приховування делегату) застосовується тоді, коли потрібно зменшити залежність клієнтського коду від делегатів, які використовуються в класі. Делегати часто додають додаткові кроки для взаємодії, що робить код менш зрозумілим і складним для підтримки. Мотивація методу полягає у спрощенні доступу до делегатів через створення додаткових методів у класі, які приховують логіку виклику делегата. Це дозволяє клієнтському коду викликати необхідний функціонал напряму, не залежачи від внутрішньої структури класу. 
     Порядок рефакторингу передбачає створення нового методу у класі, який буде викликати делегат, заміну прямих викликів делегата на виклики нового методу та проведення перевірки коректності роботи коду. У результаті знижується кількість кроків для взаємодії з делегатом, що робить код більш зрозумілим, інтуїтивно простим і зручним для використання.
     
1.2.3. Використати описані методи рефакторингу для коду власних програмних проєктів.
Метод 1 (Add Parameter)
 1   // Код до рефакторингу
 2   #include <iostream>
 3   using namespace std;
 4   
 5   class ReportGenerator {
 6   public:
 7       void GenerateReport() {
 8           cout << "Generating standard report..." << endl;
 9       }
10   };
11   
12   int main() {
13       ReportGenerator report;
14       report.GenerateReport();
15       return 0;
16   }
17   
18   // Код після рефакторингу
19   #include <iostream>
20   using namespace std;
21   
22   class ReportGenerator {
23   public:
24       void GenerateReport(bool includeSummary = false) {
25           cout << "Generating standard report..." << endl;
26           if (includeSummary) {
27               cout << "Adding summary to the report..." << endl;
28           }
29       }
30   };
31   
32   int main() {
33       ReportGenerator report;
34       report.GenerateReport();            
35       report.GenerateReport(true);       
36       return 0;
37   }

Метод 2 (Remove Parameter)
 1   // Код до рефакторингу 
 2   #include <iostream>
 3   using namespace std;
 4   
 5   class FileLogger {
 6   public:
 7       void Log(string message, string logLevel) {
 8           cout << "[" << logLevel << "] " << message << endl;
 9       }
10   };
11   
12   int main() {
13       FileLogger logger;
14       logger.Log("System started", "INFO");
15       return 0;
16   }
17   
18   // Код після рефакторингу
19   #include <iostream>
20   using namespace std;
21   
22   class FileLogger {
23   public:
24       void Log(string message) {
25           cout << "[INFO] " << message << endl;
26       }
27   };
28   
29   int main() {
30       FileLogger logger;
31       logger.Log("System started");
32       return 0;
33   }
34       report.GenerateReport();            
35       report.GenerateReport(true);       
36       return 0;
37   }

Метод 3 (Hide Delegate)
 1   // Код до рефакторингу
 2   #include <iostream>
 3   using namespace std;
 4   
 5   class Database {
 6   public:
 7       void Connect() {
 8           cout << "Database connected" << endl;
 9       }
10   };
11   
12   class Application {
13   public:
14       Database db;
15   };
16   
17   int main() {
18       Application app;
19       app.db.Connect();
20       return 0;
21   }
22   
23   // Код після рефакторингу
24   #include <iostream>
25   using namespace std;
26   
27   class Database {
28   public:
29       void Connect() {
30           cout << "Database connected" << endl;
31       }
32   };
33   
34   class Application {
35   private:
36       Database db;
37   
38   public:
39       void ConnectToDatabase() {
40           db.Connect();
41       }

1.3 Висновки
В ході виконання практичної роботи було розглянуто три методи рефакторингу: Add Parameter, Remove Parameter та Hide Delegate, а також описано їх застосування. На основі реальних прикладів програмного коду були визначені проблемні місця, що потребували оптимізації, і виконано їх покрокове покращення за допомогою обраних методів. Було надано детальний опис кожного методу, пояснено їх переваги та наочно продемонстровано, як зміни впливають на структуру коду та його якість. Рефакторинг дозволив спростити логіку програмного забезпечення, підвищити його читабельність і гнучкість, а також зменшити залежність між класами. Практичне застосування методів допомогло закріпити теоретичні знання і дало можливість зрозуміти, як ефективно обирати відповідний метод для вирішення конкретних проблем у коді. Була підготовлена презентація, слайди якої наведено в додатку А.

1.4 Список використаних джерел
1. Fowler, Martin. Refactoring: Improving the Design of Existing Code. Second Edition. – Boston: Addison-Wesley, 2018. – 448 p.
2. Офіційна документація C++: [вебсайт]. – Режим доступу: https://learn.microsoft.com/en-us/cpp/ (дата звернення: 12.12.2024).
3. Refactoring.Guru: [вебсайт]. – Режим доступу: https://refactoring.guru (дата звернення: 12.12.2024).
4. JetBrains: [вебсайт]. – Режим доступу: https://www.jetbrains.com (дата звернення: 12.12.2024).
5. Visual Studio: [вебсайт]. – Режим доступу: https://visualstudio.microsoft.com (дата звернення: 12.12.2024).
6. Eclipse: [вебсайт]. – Режим доступу: https://www.eclipse.org (дата звернення: 12.12.2024).

1.5 Посилання
Посилання на GitHub репозиторій: https://github.com/NureHorishniaKateryna/arkpz-pzpi-22-6-horishnia-kateryna/tree/main/Pract2
Посилання на відео доповіді: https://www.youtube.com/watch?v=wPoUM4sR3jE
 
Додаток А
Слайди презентації

Рисунок А.1 – Титульний слайд

Рисунок А.2 – Зміст презентації
 
Рисунок А.3 – Вступ

Рисунок А.4 – Опис обраного методу рефакторингу № 1
 
Рисунок А.5 – Опис обраного методу рефакторингу № 2

Рисунок А.6 – Опис обраного методу рефакторингу № 3
 
Рисунок А.7 – Застосування обраного методу рефакторингу № 1

Рисунок А.8 – Застосування обраного методу рефакторингу № 2
 
Рисунок А.9 – Застосування обраного методу рефакторингу № 3

Рисунок А.10 – Огляд інструментів для рефакторингу
 
Рисунок А.11 – Висновки

Рисунок А.12 – Список використаних джерел
 
Рисунок А.13 – Завершальний слайд
